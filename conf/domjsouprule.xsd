<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at
  
  http://www.apache.org/licenses/LICENSE-2.0
  
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<!--
  Document   : domain-suffixes.xsd
  Author     : Enis Soztutar - enis.soz.nutch@gmail.com
  Description: This document is the schema for valid domain-suffixes
  definitions. For successful parsing of domain-suffixes xml files, 
  the xml file should be validated with this xsd. 
  See        : org.apache.nutch.util.domain.DomainSuffixesReader.java
-->

<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <xs:element name="parse">
          <!-- regex domain 
          use this xpath with "url" regex
          -->
          <xs:complexType>
            <xs:sequence>           
              <xs:element name="fields" maxOccurs="unbounded">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="fieldname" type="xs:string" />

                    <!-- can be multiple with | separator like "jssoupquery1|jssoupquery2 (first value found that is not nothing will be processed) -->
                    <xs:element name="jsoupquery" type="xs:string" />
                    
                    <!-- extract data from url using textProcess and bybass jsoup query -->
                    <xs:element name="processingUrl" type="xs:boolean" default="false" />

                    <!-- if nothig was found with jsoup it's possible to add custom value -->
                    <xs:element  name="nothingFoundAction">
                      <xs:complexType>
                        <xs:sequence>
                          <xs:element name="setcustomVal" type="xs:boolean" />
                          <xs:element name="customVal" type="xs:string" />
                        </xs:sequence>
                      </xs:complexType>
                    </xs:element>

                    <!-- move element to parent -->
                    <xs:element  name="moveToParent">
                      <xs:complexType>
                        <xs:sequence>
                          <xs:element name="enabled" type="xs:boolean"  default="false" />
                          <xs:element name="goBackParentsNumbers" type="xs:int" />
                          <xs:element name="jsoupquery" type="xs:string" />
                        </xs:sequence>
                      </xs:complexType>
                    </xs:element>

                    <!-- join multiple values -->
                    <xs:element name="isMultiple" type="xs:boolean" default="false" />

                    <!-- set value before fetch -->
                    <xs:element name="equalcheckBeforeTextProcess" type="equalcheck" />

                    <!-- elastic research value -->
                    <xs:element name="elastic">
                      <xs:complexType>
                        <xs:sequence>
                          <xs:element name="findintoelastic" type="xs:boolean" default="false" />
                          <xs:element name="findUrlValue" type="xs:string" />
                          <xs:element name="fieldName" type="xs:string" />
                          <xs:element  name="elasticprocesstype">
                            <xs:simpleType>
                              <xs:restriction base="xs:string">
                                <xs:enumeration value="processFieldJsoup" />
                                <xs:enumeration value="setFieldValue" />
                              </xs:restriction>
                            </xs:simpleType>
                          </xs:element>
                        </xs:sequence>
                      </xs:complexType>
                    </xs:element>
                    
                    <xs:element  name="returnType">
                      <xs:simpleType>
                        <xs:restriction base="xs:string">
                          <xs:enumeration value="text" />
                          <xs:enumeration value="html" />
                          <xs:enumeration value="attr" />
                          <xs:enumeration value="count" />
                          <xs:enumeration value="static" />
                          <xs:enumeration value="joinfields" />
                        </xs:restriction>
                      </xs:simpleType>
                    </xs:element>
                    <xs:element name="attrname" type="xs:string" />
                    <xs:element name="staticval" type="xs:string" />
                    <xs:element name="multipleSeparator" type="xs:string"  default="|"/>

                    <!-- separated from "," ex. title,tags -->
                    <xs:element name="joinfields">
                      <xs:complexType>
                        <xs:sequence>
                          <xs:element name="fieldName" type="xs:string" maxOccurs="unbounded" />
                          <xs:element name="separator" type="xs:string" />
                        </xs:sequence>
                      </xs:complexType>
                    </xs:element>



                    <!-- trim,replace,split -->
                    <xs:element  name="textProcess">
                      <xs:complexType>
                        <xs:sequence>

                          <!-- trim-->
                          <xs:element  name="trim" maxOccurs="unbounded">
                            <xs:complexType>
                              <xs:sequence>
                                <xs:element name="trimvalue" type="xs:string" />
                                <xs:element  name="type">
                                  <xs:simpleType>
                                    <xs:restriction base="xs:string">
                                      <xs:enumeration value="left" />
                                      <xs:enumeration value="right" />
                                      <xs:enumeration value="both" />
                                    </xs:restriction>
                                  </xs:simpleType>
                                </xs:element>
                              </xs:sequence>
                            </xs:complexType>
                          </xs:element>

                          <!-- replace-->
                          <xs:element  name="replace" maxOccurs="unbounded">
                            <xs:complexType>
                              <xs:sequence>
                                <xs:element name="findstring" type="xs:string" />
                                <xs:element name="val" type="xs:string" />
                              </xs:sequence>
                            </xs:complexType>
                          </xs:element>

                          <!-- split (return an index of splitted array)
                          Multiple index Ex: a,b,c,d
                          set multiple index and separator for return 
                            <returnindex>0</returnindex>
                            <returnindex>2</returnindex>
                            <separator>|</separator>
                            
                            result a|c
                          -->
                          <xs:element  name="split" maxOccurs="unbounded">
                            <xs:complexType>
                              <xs:sequence>
                                <xs:element name="splitvalue" type="xs:string" />
                                <xs:element name="returnindex" type="xs:int" maxOccurs="unbounded" />
                                <xs:element name="separator" type="xs:string" />
                                <xs:element  name="type" default="index">
                                  <xs:simpleType>
                                    <xs:restriction base="xs:string">
                                      <xs:enumeration value="index" />
                                      <xs:enumeration value="first" />
                                      <xs:enumeration value="last" />
                                    </xs:restriction>
                                  </xs:simpleType>
                                </xs:element>
                              </xs:sequence>
                            </xs:complexType>
                          </xs:element>

                          <!-- append -->
                          <xs:element  name="append" maxOccurs="unbounded">
                            <xs:complexType>
                              <xs:sequence>                               
                                <xs:element name="val" type="xs:string" />
                                <xs:element  name="type">
                                  <xs:simpleType>
                                    <xs:restriction base="xs:string">
                                      <xs:enumeration value="before" />
                                      <xs:enumeration value="after" />
                                      <xs:enumeration value="both" />
                                    </xs:restriction>
                                  </xs:simpleType>
                                </xs:element>
                              </xs:sequence>
                            </xs:complexType>
                          </xs:element>

                          <!-- substring -->
                          <xs:element  name="substring">
                            <xs:complexType>
                              <xs:sequence>
                                <xs:element name="beginindex" type="xs:int" />
                                <xs:element name="endindex" type="xs:int" />
                                <xs:element  name="type">
                                  <xs:simpleType>
                                    <xs:restriction base="xs:string">
                                      <xs:enumeration value="beginindex" />
                                      <xs:enumeration value="fromto" />                                      
                                    </xs:restriction>
                                  </xs:simpleType>
                                </xs:element>
                              </xs:sequence>
                            </xs:complexType>
                          </xs:element>

                          <!-- regex -->
                          <xs:element  name="regex" type="xs:string" />                         

                          <!-- percent calculate from extracted value (for. eg extracted 4 on totalValue=10 = 40% -->
                          <xs:element  name="percentCalculate">
                            <xs:complexType>
                              <xs:sequence>
                                <xs:element name="appendPercentValue" type="xs:boolean" />
                                <xs:element name="totalValue" type="xs:int" />
                              </xs:sequence>
                            </xs:complexType>
                          </xs:element>
                          
                          <!-- contains (if contains a value set a custom value)-->
                          <xs:element  name="contains">
                            <xs:complexType>
                              <xs:sequence>
                                <xs:element name="containValue" type="xs:string" />
                                <xs:element name="customValue" type="xs:string" />
                                <xs:element name="caseInsensitive" type="xs:boolean" default="false" />
                              </xs:sequence>
                            </xs:complexType>
                          </xs:element>
                          
                          <!-- Date Pattern is : "M/d/y k:m:s" -->
                          <xs:element  name="datePattern">
                            <xs:complexType>
                              <xs:sequence>                                
                                <xs:element name="dateFormat" type="xs:string"  default="M/d/y k:m:s"/>
                                <xs:element name="separator" type="xs:string"  default=" "/>
                                <!-- splitPattern : split a string and set for a specific index java date type 
                                                    http://docs.oracle.com/javase/6/docs/api/java/text/SimpleDateFormat.html
                                                    for e.g 6 days, 23 hours, may
                                                            index => 0 => 6 as d
                                                            index => 2 => 23 as k
                                                            index => 4 => may as M                                                    
                                     splitPatternFromNow : add date from now (for. eg 6 days, 23 hours left)                                    
                                            -->
                                <xs:element  name="type">
                                  <xs:simpleType>
                                    <xs:restriction base="xs:string">
                                      <xs:enumeration value="splitPatternFromNow" />
                                      <xs:enumeration value="splitPattern" />
                                    </xs:restriction>
                                  </xs:simpleType>
                                </xs:element>

                                <xs:element  name="indexDef" maxOccurs="unbounded">
                                  <xs:complexType>
                                    <xs:sequence>
                                      <xs:element name="index" type="xs:int"/>
                                      <!-- Avaiable values = M,D,y,k,m!--> 
                                      <xs:element name="dateLetter" type="xs:string"/>
                                    </xs:sequence>
                                  </xs:complexType>
                                </xs:element>

                              </xs:sequence>
                            </xs:complexType>
                          </xs:element>
                          
                          
                        </xs:sequence>
                      </xs:complexType>

                    </xs:element>

                    <xs:element name="equalcheckAfterTextProcess" type="equalcheck" />

                  </xs:sequence>
                </xs:complexType>
              </xs:element>



            </xs:sequence>
          </xs:complexType>

   
  </xs:element>

  <xs:complexType  name="equalcheck">
    <xs:sequence>
      <xs:element name="valtocheck" type="xs:string" />
      <xs:element name="replaceval" type="xs:string" />
      <xs:element  name="type">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:enumeration value="equal" />
            <xs:enumeration value="notequal" />
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>


</xs:schema>
