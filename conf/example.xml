<?xml version="1.0" encoding="UTF-8"?>

 <parse>
     <fields>
		 <!-- Field name -->
	     <fieldname>viewcount</fieldname>
		 <!-- css query -->
	     <jsoupquery>#qinfo tr:nth-child(2) td:nth-child(2) p b</jsoupquery>
		 <!-- Return type : 
		 text : return text
		 html : return html
		 attr : return specific attribute (in <attraname>)
		 count: return count of found tags
		 static : return ever a static value ( <staticval>)
		 -->
	     <returnType>text</returnType>
		 
		 <!-- if Return type = attr set attrname (Es. "href","id",...) -->
	     <attrname></attrname>
		 
		  <!-- if Return type = static return ever this value -->
		 <staticval></staticval>
		 
		 <!-- check if value is equal or not equal and override to an stastic value before process text-->
		 <!-- For e.g if val=1000 set val=thousand -->
		 <equalcheckBeforeTextProcess>
			<!-- equal,notequal !-->
			<type>equal</type>
			<valtocheck>1000</valtocheck>
			<replaceval>thousand</replaceval>
		 </equalcheckBeforeTextProcess>
		 
		 
		 <!-- ElasticSearch extraction 
		  Like this example  it is possible to fetch an other url previusly added into elasticsearch and add a specific field from query
		  -->
		 <fields>
			  <fieldname>titleFromElastic</fieldname>
			  <jsoupquery></jsoupquery>
			  <elastic>
				 <!-- true or false --> 
				 <findintoelastic>1</findintoelastic>
				 <!-- search by url valeu --> 
				 <findUrlValue>http://url.html</findUrlValue>
				 <!-- return a specific field --> 
				 <fieldName>title</fieldName>
				 
				 <!-- setFieldValue,processFieldJsoup 
				 setFieldValue : search by url and return a specific field value by "<fieldName>"
				 processFieldJsoup : search by url and process the value with this file (override current page html)				 
				 -->
				 <elasticprocesstype>setFieldValue</elasticprocesstype>
			 </elastic>
			 <returnType>text</returnType><!-- text,html,attr -->
			 <attrname></attrname>
		 </fields>
		 
	     
		 <!-- Post process text after -->
	     <textProcess>
			<!-- Trim data (multiples) -->
	         <trim>
	             <trimvalue> </trimvalue>
	             <type>right</type>
	         </trim>
	          <trim>
	             <trimvalue>1</trimvalue>
	             <type>left</type><!-- left,right,both -->
	         </trim>
	         
			 <!-- Replace Text (multiples)-->
	         <replace>
	             <findstring>times</findstring>
	             <val></val>
	         </replace>
	         
	         <!--  
	         <replace>
	             <findstring></findstring>
	             <val></val>
	         </replace>
	         <replace>
	             <findstring></findstring>
	             <val></val>
	         </replace>
	         -->
			 
			 <!-- Split : split string and get a specific index 
			 (Example split string "a,b,c,d,e" with splitvalue=',' and get returnindex=2 return "b" -->
	          <!--  
	         <split>
	             <splitvalue></splitvalue>
	             <returnindex></returnindex>
	         </split>
	         -->
			 
			  <!-- Append value before,after or both -->
			 <append>
				<!--before,after,both -->
				<type>both</type>
				<val>--</val>
			 </append>
			 
			 <!-- substring-->
			 <substring>
				<!--
				beginindex : For eg. (beginindex=5) "This is a text"  => "is as text" (
				fromTo : : For eg. (beginindex=0,endindex=4) "This is a text"  => "This"
				-->
				<type></type>
				<beginindex>5</beginindex>
				<endindex>10</endindex>
			 </substring>
			 
			 <!-- perform regex match -->
			 <regex></regex>
	         
	     </textProcess>
		 
		 
		 <!-- check if value is equal or not equal and override to an stastic value after process text-->
		 <!-- For e.g if val=1000 set val=thousand -->
		 <equalcheckBeforeTextProcess>
			<!-- equal,notequal !-->
			<type>equal</type>
			<valtocheck>1000</valtocheck>
			<replaceval>thousand</replaceval>
		 </equalcheckBeforeTextProcess>
		 
     </fields>
     
     
 </parse>
    

